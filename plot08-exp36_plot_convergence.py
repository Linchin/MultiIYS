# coding: utf-8


"""
File Name:
plot08-exp36_plot_convergence.py

Based on:
exp36

Date:
10/08/2020

read the file generated by exp36, and plot the result

run multiple realizations of exp36 under the same hypothesis.
1. Plot the estimated topology wrt iterations
2. Plot the estimated rho value wrt iterations

"""

import numpy as np
import time
import pickle
import os
from os.path import join
import matplotlib.pyplot as plt


# absolute dir the script is in
script_dir = os.path.dirname(__file__)

# file to be loaded
rel_path_temp = "result_temp"
experiment_name = "exp20201008_multiple_exp"  # subfolder where this data is saved
topology_name = "010-001-000"  # handle to conveniently know the basic topology

time_string = "20201010-104556-"

# the file name
file_name = "exp36-data-" + time_string + topology_name + "(iYS_top_gibbs_v2).pickle"
complete_file_name = join(script_dir, rel_path_temp,
                          experiment_name, file_name)

with open(complete_file_name, 'rb') as handle:
    data_dict = pickle.load(handle)
    print("Data loaded successfully!")
    print("Loaded file name: \n", complete_file_name)

for key in data_dict["parameters"]:
    print(key, ": \n", data_dict["parameters"][key])

# time string to name the plots
cur_time_string = time.strftime("%Y%m%d-%H%M%S", time.localtime())

rel_path_plot = "plots"

network_size = data_dict["parameters"]["network size"]
gibbs_iterations = data_dict["parameters"]["Gibbs sampling iterations"]
total_rep = data_dict["parameters"]["total number of MC simulations"]

# Plot the rate of correct adjacency matrix wrt iterations

iteration_axis = np.zeros(gibbs_iterations)
count = 1
for i in range(0, gibbs_iterations):
    iteration_axis[i] = count
    count += 1

# process the data
top_correct_rate = {}
for i in range(network_size):
    for j in range(network_size):
        if i == j:
            continue
        top_correct_rate[(i, j)] = np.zeros(gibbs_iterations)
        for t in range(gibbs_iterations):
            count = 0
            for tt in range(total_rep):
                if data_dict["data"][tt]["adj_mat"][t][j][i] \
                 == data_dict["parameters"]["adjacency matrix"][i][j]:
                    count += 1
            top_correct_rate[(i, j)][t] = count / total_rep

# plot
f, ax = plt.subplots(nrows=1, ncols=1,
                    figsize=(6.78, 4.6))

fontdict = {'fontsize': 7}

left = 0
right = 51
bottom = 0
top = 1

ax.set_xlim(left=left, right=right)
ax.set_ylim(bottom=bottom, top=top)


for key in top_correct_rate:
    ax.plot(iteration_axis, top_correct_rate[key], label=str(key))

ax.legend()
ax.set_title("Correct Topology Rate", fontdict=fontdict)
ax.set_xlabel("Gibbs sampling iterations", fontdict=fontdict)
ax.set_ylabel("%", fontdict=fontdict)

# save the graph
graph_name_1 = "plt08-exp36-" + cur_time_string + "-"\
              + "top_gibbs_cor_rate.pdf"
complete_graph_path_1 = join(script_dir, rel_path_plot, graph_name_1)

plt.savefig(complete_graph_path_1, bbox_inches='tight')


# plot the estimated rho value

# plot
f2, ax2 = plt.subplots(nrows=1, ncols=1,
                      figsize=(6.78, 4.6))

fontdict = {'fontsize': 7}

left = 0
right = 51
bottom = 0
top = 2

ax2.set_xlim(left=left, right=right)
ax2.set_ylim(bottom=bottom, top=top)


for i in range(total_rep):
    ax2.plot(iteration_axis, data_dict["data"][i]["rho"], label=str(i))

ax2.legend()
ax2.set_title("Estimated rho value", fontdict=fontdict)
ax2.set_xlabel("Gibbs sampling iterations", fontdict=fontdict)
ax2.set_ylabel("rho", fontdict=fontdict)

# save the graph
graph_name_2 = "plt08-exp36-" + cur_time_string + "-"\
              + "est_rho.pdf"
complete_graph_path_2 = join(script_dir, rel_path_plot, graph_name_2)

plt.savefig(complete_graph_path_2, bbox_inches='tight')



