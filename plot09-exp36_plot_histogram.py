# coding: utf-8


"""
File Name:
plot09-exp36_plot_histogram.py

Based on:
exp36
plot08

Date:
10/10/2020

Read the file generated by exp36, plot the histogram.

"""


import numpy as np
import time
import pickle
import os
from os.path import join
import matplotlib.pyplot as plt


# absolute dir the script is in
script_dir = os.path.dirname(__file__)

# Load the files of data

# file to be loaded
rel_path_temp = "result_temp"

# do not change this one
experiment_name = "exp20201008_multiple_exp"  # subfolder where this data is saved

# file name components
topology_name = "010-001-100"  # handle to conveniently know the basic topology
time_string = "20201013-105634-"


# the file name
file_name = "exp36-data-" + time_string + topology_name + "(iYS_top_gibbs_v2).pickle"
complete_file_name = join(script_dir, rel_path_temp,
                          experiment_name, file_name)

with open(complete_file_name, 'rb') as handle:
    data_dict = pickle.load(handle)
    print("Data loaded successfully!")
    print("Loaded file name: \n", complete_file_name)

for key in data_dict["parameters"]:
    print(key, ": \n", data_dict["parameters"][key])

# info on the plots to be saved

# time string to name the plots
cur_time_string = time.strftime("%Y%m%d-%H%M%S", time.localtime())
rel_path_plot = "plots"

# basic parameters
network_size = data_dict["parameters"]["network size"]
gibbs_iterations = data_dict["parameters"]["Gibbs sampling iterations"]
total_rep = data_dict["parameters"]["total number of MC simulations"]

# total number of links to be estimated
links_total = network_size * (network_size - 1)

# process the data
correct_count = [0 for i in range(links_total)]
wrong_count = [0 for i in range(links_total)]

link_label = ["" for i in range(links_total)]

this_count = -1
for i in range(network_size):
    for j in range(network_size):
        if i == j:
            continue

        this_count += 1
        current_label = str(i) + "->" + str(j)
        link_label[this_count] = current_label

        cor_count = 0
        wrg_count = 0
        for t in range(total_rep):
            if data_dict["data"][t]["adj_mat"][-1][j][i] \
              == data_dict["parameters"]["adjacency matrix"][i][j]:
                cor_count += 1
            else:
                wrg_count += 1

        correct_count[this_count] = cor_count
        wrong_count[this_count] = wrg_count


# plot the histogram
f, (ax1, ax2) = plt.subplots(nrows=1, ncols=2,
                    figsize=(6.78, 4.6))

ax1.bar(link_label, correct_count)
ax2.bar(link_label, wrong_count)

plt.show()

# save the histogram










